import aoc

lines = aoc.parse(__file__, sample=False)

fs = {
    '/': {},
}

cwd = ['/']


def get_fs_from_path(path: list):
    curr = fs

    for p in path:
        if p not in curr:
            raise Exception(f'invalid path {"".join(path)}')
        curr = curr[p]

    return curr


def part1():
    cwd = ['/']

    # parse what we have
    for line in lines:
        match line.split(' '):
            case ['$', *cmd]:
                match cmd:
                    case ['cd', dst]:
                        match dst:
                            case '..':
                                cwd.pop()
                            case '/':
                                cwd = ['/']
                            case _:
                                if dst not in (g := get_fs_from_path(cwd)):
                                    g[dst] = {}
                                cwd.append(dst)
                    case ['ls']:
                        pass
            case ['dir', _]:
                pass
            case [*file]:
                size, n = file
                get_fs_from_path(cwd)[n] = int(size)

    def total_dirs(root: dict):
        total = 0
        for k, v in root.items():
            if isinstance(v, dict):
                total += total_dirs(v)
            else:
                total += v
        return total

    totals = []

    def print_totals(root: dict):
        for k, v in root.items():
            if isinstance(v, dict):
                # limit to directories that have a total less than 100000
                if (t := total_dirs(v)) <= 100000:
                    totals.append(t)
                print_totals(v)

    print_totals(fs)
    print(f'part1 => {sum(totals)}')


def part2():
    cwd = ['/']

    # parse what we have
    for line in lines:
        match line.split(' '):
            case ['$', *cmd]:
                match cmd:
                    case ['cd', dst]:
                        match dst:
                            case '..':
                                cwd.pop()
                            case '/':
                                cwd = ['/']
                            case _:
                                if dst not in (g := get_fs_from_path(cwd)):
                                    g[dst] = {}
                                cwd.append(dst)
                    case ['ls']:
                        pass
            case ['dir', _]:
                pass
            case [*file]:
                size, n = file
                get_fs_from_path(cwd)[n] = int(size)

    def total_dirs(root: dict):
        total = 0
        for k, v in root.items():
            if isinstance(v, dict):
                total += total_dirs(v)
            else:
                total += v
        return total

    totals = []

    def print_totals(root: dict):
        for k, v in root.items():
            if isinstance(v, dict):
                totals.append(total_dirs(v))
                print_totals(v)

    # print_totals(fs)
    space_used = total_dirs(fs)
    free_space = 70000000 - space_used
    need = 30000000 - free_space
    print_totals(fs)

    print(f'part2 => {min([x for x in totals if x >= need])}')


if __name__ == '__main__':
    part1()
    part2()
